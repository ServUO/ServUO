/////////////////////////////////////////////////
//                                             //
// Automatically generated by the              //
// AddonGenerator script by Arya               //
//                                             //
/////////////////////////////////////////////////
using System;
using Server;
using Server.Items;

namespace Server.Items
{
	public class minostatueAddon : BaseAddon
	{
		public override BaseAddonDeed Deed
		{
			get
			{
				return new minostatueAddonDeed();
			}
		}

		[ Constructable ]
		public minostatueAddon()
		{
			AddonComponent ac;
			ac = new AddonComponent( 12405 );
			ac.Hue = 2814;
			AddComponent( ac, -1, 0, 0 );
			ac = new AddonComponent( 3317 );
			AddComponent( ac, -2, 1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, 0, 1, 0 );
			ac = new AddonComponent( 3318 );
			AddComponent( ac, -1, 1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, -2, 1, 0 );
			ac = new AddonComponent( 14742 );
			ac.Light = LightType.Circle225;
			AddComponent( ac, -2, -1, 0 );
			ac = new AddonComponent( 12406 );
			ac.Hue = 2814;
			AddComponent( ac, 0, -1, 0 );
			ac = new AddonComponent( 3315 );
			AddComponent( ac, 1, -1, 0 );
			ac = new AddonComponent( 14742 );
			ac.Light = LightType.Circle225;
			AddComponent( ac, -2, 1, 0 );
			ac = new AddonComponent( 2282 );
			AddComponent( ac, -2, 2, 0 );
			ac = new AddonComponent( 14732 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, 1, -1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, -1, 1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, 1, 1, 0 );
			ac = new AddonComponent( 3316 );
			AddComponent( ac, 1, 0, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, -2, -1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, -2, 0, 0 );
			ac = new AddonComponent( 12404 );
			ac.Hue = 2814;
			AddComponent( ac, 0, 0, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, -1, -1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, -1, 0, 0 );
			ac = new AddonComponent( 14732 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, 0, -1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, 0, -1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, 1, -1, 0 );
			ac = new AddonComponent( 14742 );
			ac.Light = LightType.Circle225;
			AddComponent( ac, -2, 0, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, 0, 0, 0 );
			ac = new AddonComponent( 14732 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, -1, -1, 0 );
			ac = new AddonComponent( 3319 );
			AddComponent( ac, 0, 1, 0 );
			ac = new AddonComponent( 2281 );
			AddComponent( ac, 2, -1, 0 );
			ac = new AddonComponent( 14732 );
			ac.Light = LightType.Circle225;
			AddComponent( ac, -2, -1, 0 );
			ac = new AddonComponent( 4846 );
			ac.Light = LightType.ArchedWindowEast;
			AddComponent( ac, 1, 0, 0 );

		}

		public minostatueAddon( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( 0 ); // Version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}

	public class minostatueAddonDeed : BaseAddonDeed
	{
		public override BaseAddon Addon
		{
			get
			{
				return new minostatueAddon();
			}
		}

		[Constructable]
		public minostatueAddonDeed()
		{
			Name = "minostatue";
		}

		public minostatueAddonDeed( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( 0 ); // Version
		}

		public override void	Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}
}